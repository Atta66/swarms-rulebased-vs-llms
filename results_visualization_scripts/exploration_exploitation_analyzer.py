"""
Exploration-Exploitation Balance Analyzer: Classic ACO vs LLM ACO
Shows how exploration (starts high, goes down) and exploitation (starts low, goes up) evolve over iterations
"""

import json
import numpy as np
import matplotlib.pyplot as plt
import os
import glob
from datetime import datetime

def find_latest_results(results_type):
    """Find the most recent results file for the given type (aco or aco_llm)."""
    results_dir = f"../results/{results_type}"
    if not os.path.exists(results_dir):
        print(f"‚ùå Results directory {results_dir} not found!")
        return None
    
    pattern = os.path.join(results_dir, f"multi_run_{results_type}_*.json")
    files = glob.glob(pattern)
    
    if not files:
        print(f"‚ùå No {results_type} result files found")
        return None
    
    latest_file = max(files, key=os.path.getctime)
    print(f"üìä Using latest {results_type} results: {os.path.basename(latest_file)}")
    return latest_file

def calculate_exploration_exploitation(file_path, max_trials=10):
    """Calculate exploration and exploitation metrics from trial data."""
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
        
        individual_results = data.get('individual_results', [])
        if not individual_results:
            print(f"‚ùå No individual results found in {file_path}")
            return None
        
        all_trials_data = []
        trials_to_analyze = min(max_trials, len(individual_results))
        
        for trial_idx in range(trials_to_analyze):
            trial = individual_results[trial_idx]
            detailed_steps = trial.get('detailed_step_data', [])
            
            if not detailed_steps:
                continue
            
            trial_exploration = []
            trial_exploitation = []
            iterations = []
            
            for step in detailed_steps:
                iteration = step.get('step', 0)
                
                # Get probabilities for short and long paths
                short_prob = step.get('short_prob', 0.5)
                long_prob = step.get('long_prob', 0.5)
                
                # Calculate exploration: high when probabilities are balanced (close to 0.5 each)
                # Exploration = 1 - |difference from uniform distribution|
                # When probs are [0.5, 0.5] -> exploration = 1.0 (maximum)
                # When probs are [1.0, 0.0] -> exploration = 0.0 (minimum)
                prob_balance = 2 * min(short_prob, long_prob)  # This is the balance score
                exploration = prob_balance  # High when balanced, low when skewed
                
                # Exploitation is the inverse of exploration
                # High exploitation means strong preference for one path
                exploitation = 1.0 - exploration
                
                trial_exploration.append(exploration)
                trial_exploitation.append(exploitation)
                iterations.append(iteration)
            
            if trial_exploration:  # Only add if we have data
                all_trials_data.append({
                    'trial': trial_idx + 1,
                    'iterations': iterations,
                    'exploration': trial_exploration,
                    'exploitation': trial_exploitation
                })
        
        print(f"‚úÖ Calculated exploration/exploitation for {len(all_trials_data)} trials")
        return all_trials_data
    
    except Exception as e:
        print(f"‚ùå Error calculating exploration/exploitation from {file_path}: {e}")
        return None

def average_across_trials(trials_data):
    """Average exploration/exploitation across all trials for each iteration."""
    if not trials_data:
        return None, None, None
    
    # Find the maximum number of iterations across all trials
    max_iterations = max(len(trial['iterations']) for trial in trials_data)
    
    exploration_by_iteration = []
    exploitation_by_iteration = []
    iterations = list(range(max_iterations))
    
    for iter_idx in range(max_iterations):
        exploration_values = []
        exploitation_values = []
        
        for trial in trials_data:
            if iter_idx < len(trial['exploration']):
                exploration_values.append(trial['exploration'][iter_idx])
                exploitation_values.append(trial['exploitation'][iter_idx])
        
        if exploration_values:  # Only calculate if we have data
            exploration_by_iteration.append(np.mean(exploration_values))
            exploitation_by_iteration.append(np.mean(exploitation_values))
        else:
            exploration_by_iteration.append(0)
            exploitation_by_iteration.append(0)
    
    return iterations, exploration_by_iteration, exploitation_by_iteration

def create_exploration_exploitation_visualization():
    """Create visualization showing exploration-exploitation balance over time."""
    # Load data
    aco_file = find_latest_results('aco')
    aco_llm_file = find_latest_results('aco_llm')
    
    if not aco_file or not aco_llm_file:
        print("‚ùå Missing required result files")
        return
    
    aco_trials_data = calculate_exploration_exploitation(aco_file)
    aco_llm_trials_data = calculate_exploration_exploitation(aco_llm_file)
    
    if not aco_trials_data or not aco_llm_trials_data:
        print("‚ùå Failed to calculate exploration/exploitation data")
        return
    
    # Average across trials
    aco_iter, aco_exploration, aco_exploitation = average_across_trials(aco_trials_data)
    aco_llm_iter, aco_llm_exploration, aco_llm_exploitation = average_across_trials(aco_llm_trials_data)
    
    if not aco_iter or not aco_llm_iter:
        print("‚ùå Failed to average data across trials")
        return
    
    # Create visualization with single plot
    fig, ax = plt.subplots(1, 1, figsize=(14, 8))
    
    # Plot exploration trends (solid lines)
    ax.plot(aco_iter, aco_exploration, 'b-', linewidth=3, 
            label='Classic ACO - Exploration', alpha=0.8)
    ax.plot(aco_llm_iter, aco_llm_exploration, 'r-', linewidth=3, 
            label='LLM ACO - Exploration', alpha=0.8)
    
    # Plot exploitation trends (dashed lines)
    ax.plot(aco_iter, aco_exploitation, 'b--', linewidth=3, 
            label='Classic ACO - Exploitation', alpha=0.8)
    ax.plot(aco_llm_iter, aco_llm_exploitation, 'r--', linewidth=3, 
            label='LLM ACO - Exploitation', alpha=0.8)
    
    ax.set_xlabel('Iteration', fontsize=14)
    ax.set_ylabel('Probability Level', fontsize=14)
    ax.set_ylim(0, 1.0)
    ax.grid(True, alpha=0.3)
    ax.legend(fontsize=12, loc='center right')
    
    plt.tight_layout()
    
    # Save visualization
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"exploration_exploitation_analysis_{timestamp}.png"
    save_path = os.path.join("..", "results", "visualizations", filename)
    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    print(f"üíæ Exploration-exploitation analysis saved to: {save_path}")
    
    plt.show()
    
    return aco_trials_data, aco_llm_trials_data

def print_exploration_exploitation_statistics(aco_data, aco_llm_data):
    """Print statistical summary of exploration-exploitation patterns."""
    print("\n" + "="*80)
    print("üîç EXPLORATION-EXPLOITATION ANALYSIS")
    print("="*80)
    
    if not aco_data or not aco_llm_data:
        return
    
    # Calculate averages
    aco_iter, aco_exploration, aco_exploitation = average_across_trials(aco_data)
    aco_llm_iter, aco_llm_exploration, aco_llm_exploitation = average_across_trials(aco_llm_data)
    
    # Early vs Late comparison (first 25% vs last 25% of iterations)
    early_cutoff = len(aco_exploration) // 4
    late_start = 3 * len(aco_exploration) // 4
    
    aco_early_exploration = np.mean(aco_exploration[:early_cutoff]) if early_cutoff > 0 else 0
    aco_late_exploration = np.mean(aco_exploration[late_start:]) if late_start < len(aco_exploration) else 0
    aco_early_exploitation = np.mean(aco_exploitation[:early_cutoff]) if early_cutoff > 0 else 0
    aco_late_exploitation = np.mean(aco_exploitation[late_start:]) if late_start < len(aco_exploitation) else 0
    
    aco_llm_early_exploration = np.mean(aco_llm_exploration[:early_cutoff]) if early_cutoff > 0 else 0
    aco_llm_late_exploration = np.mean(aco_llm_exploration[late_start:]) if late_start < len(aco_llm_exploration) else 0
    aco_llm_early_exploitation = np.mean(aco_llm_exploitation[:early_cutoff]) if early_cutoff > 0 else 0
    aco_llm_late_exploitation = np.mean(aco_llm_exploitation[late_start:]) if late_start < len(aco_llm_exploitation) else 0
    
    print(f"üìä Exploration Patterns:")
    print(f"   Classic ACO: Early {aco_early_exploration:.3f} ‚Üí Late {aco_late_exploration:.3f} (Œî{aco_late_exploration - aco_early_exploration:+.3f})")
    print(f"   LLM ACO:     Early {aco_llm_early_exploration:.3f} ‚Üí Late {aco_llm_late_exploration:.3f} (Œî{aco_llm_late_exploration - aco_llm_early_exploration:+.3f})")
    
    print(f"\nüéØ Exploitation Patterns:")
    print(f"   Classic ACO: Early {aco_early_exploitation:.3f} ‚Üí Late {aco_late_exploitation:.3f} (Œî{aco_late_exploitation - aco_early_exploitation:+.3f})")
    print(f"   LLM ACO:     Early {aco_llm_early_exploitation:.3f} ‚Üí Late {aco_llm_late_exploitation:.3f} (Œî{aco_llm_late_exploitation - aco_llm_early_exploitation:+.3f})")
    
    # Learning rate analysis
    aco_exploration_change = aco_late_exploration - aco_early_exploration
    aco_llm_exploration_change = aco_llm_late_exploration - aco_llm_early_exploration
    aco_exploitation_change = aco_late_exploitation - aco_early_exploitation
    aco_llm_exploitation_change = aco_llm_late_exploitation - aco_llm_early_exploitation
    
    print(f"\nüìà Learning Behavior Analysis:")
    
    if aco_exploration_change < aco_llm_exploration_change:
        print(f"   ‚úÖ Classic ACO reduces exploration more effectively ({abs(aco_exploration_change):.3f} vs {abs(aco_llm_exploration_change):.3f})")
    else:
        print(f"   ‚úÖ LLM ACO reduces exploration more effectively ({abs(aco_llm_exploration_change):.3f} vs {abs(aco_exploration_change):.3f})")
    
    if aco_exploitation_change > aco_llm_exploitation_change:
        print(f"   üéØ Classic ACO increases exploitation more effectively (+{aco_exploitation_change:.3f} vs +{aco_llm_exploitation_change:.3f})")
    else:
        print(f"   üéØ LLM ACO increases exploitation more effectively (+{aco_llm_exploitation_change:.3f} vs +{aco_exploitation_change:.3f})")

if __name__ == "__main__":
    print("üîç Exploration-Exploitation Analysis: Classic ACO vs LLM ACO")
    print("=" * 70)
    
    # Create visualization and get data
    aco_data, aco_llm_data = create_exploration_exploitation_visualization()
    
    if aco_data and aco_llm_data:
        # Print detailed statistics
        print_exploration_exploitation_statistics(aco_data, aco_llm_data)
    
    print(f"\n‚úÖ Exploration-exploitation analysis complete!")
